#include "EquivariantTransformer.h"
#include <cmath>
#include <stdexcept>
#include <string>
#include <vector>

#include <cstdio>

using namespace std;

void assertEqual(float v1, float v2, float atol, float rtol) {
    float diff = fabs(v1-v2);
    if (diff > atol && diff/v1 > rtol)
        throw runtime_error(string("Assertion failure: expected ")+to_string(v1)+" found "+to_string(v2));
}

void validateDerivatives(EquivariantTransformerNeighbors& neighbors, EquivariantTransformerLayer& layer, float* positions, float* periodicVectors, vector<float>& x) {
    // int numAtoms = layer.getNumAtoms();
    // int width = layer.getWidth();
    // vector<float> y(numAtoms*width);
    // vector<float> inputDeriv(numAtoms*width), positionDeriv(numAtoms*3), outputDeriv(numAtoms*width, 0);
    // vector<float> offsetx(numAtoms*width), offsetPositions(numAtoms*3);
    // float step = 1e-3;
    // for (int i = 0; i < y.size(); i++) {
    //     // Use backprop to compute the gradient of one symmetry function.

    //     neighbors.build(positions, periodicVectors);
    //     layer.compute(neighbors, positions, periodicVectors, x.data(), y.data());
    //     outputDeriv[i] = 1;
    //     layer.backprop(neighbors, positions, periodicVectors, x.data(), outputDeriv.data(), inputDeriv.data(), positionDeriv.data());
    //     outputDeriv[i] = 0;

    //     // Displace the inputs along the gradient direction, compute the symmetry functions,
    //     // and calculate a finite difference approximation to the gradient magnitude from them.

    //     float norm = 0;
    //     for (int j = 0; j < inputDeriv.size(); j++)
    //         norm += inputDeriv[j]*inputDeriv[j];
    //     norm = sqrt(norm);
    //     float delta = step/norm;
    //     for (int j = 0; j < offsetx.size(); j++)
    //         offsetx[j] = x[j] - delta*inputDeriv[j];
    //     layer.compute(neighbors, positions, periodicVectors, offsetx.data(), y.data());
    //     float value1 = y[i];
    //     for (int j = 0; j < offsetx.size(); j++)
    //         offsetx[j] = x[j] + delta*inputDeriv[j];
    //     layer.compute(neighbors, positions, periodicVectors, offsetx.data(), y.data());
    //     float value2 = y[i];
    //     float estimate = (value2-value1)/(2*step);

    //     // Verify that they match.

    //     assertEqual(norm, estimate, 1e-5, 5e-3);

    //     // Displace the atom positions along the gradient direction, compute the symmetry functions,
    //     // and calculate a finite difference approximation to the gradient magnitude from them.

    //     norm = 0;
    //     for (int j = 0; j < positionDeriv.size(); j++)
    //         norm += positionDeriv[j]*positionDeriv[j];
    //     norm = sqrt(norm);
    //     delta = step/norm;
    //     for (int j = 0; j < offsetPositions.size(); j++)
    //         offsetPositions[j] = positions[j] - delta*positionDeriv[j];
    //     neighbors.build(offsetPositions.data(), periodicVectors);
    //     layer.compute(neighbors, offsetPositions.data(), periodicVectors, x.data(), y.data());
    //     value1 = y[i];
    //     for (int j = 0; j < offsetPositions.size(); j++)
    //         offsetPositions[j] = positions[j] + delta*positionDeriv[j];
    //     neighbors.build(offsetPositions.data(), periodicVectors);
    //     layer.compute(neighbors, offsetPositions.data(), periodicVectors, x.data(), y.data());
    //     value2 = y[i];
    //     estimate = (value2-value1)/(2*step);

    //     // Verify that they match.

    //     assertEqual(norm, estimate, 1e-5, 5e-3);
    // }
}

void testWater(float* periodicVectors, float* expectedOutput) {
    int numAtoms = 3;
    float positions[3][3] = {
        {-0.00570308,  0.38515871, -0.0},
        {-0.79607794, -0.194675,   -0.0},
        { 0.80178102, -0.1904837,   0.0}
    };
    // int numAtoms = 18;
    // float positions[18][3] = {
    //     { 0.726, -1.384, -0.376},
    //     {-0.025, -0.828, -0.611},
    //     { 1.456, -1.011, -0.923},
    //     {-1.324,  0.387, -0.826},
    //     {-1.923,  0.698, -1.548},
    //     {-1.173,  1.184, -0.295},
    //     { 0.837, -1.041,  2.428},
    //     { 1.024, -1.240,  1.461},
    //     { 1.410, -1.677,  2.827},
    //     { 2.765,  0.339, -1.505},
    //     { 2.834,  0.809, -0.685},
    //     { 3.582, -0.190, -1.593},
    //     {-0.916,  2.705,  0.799},
    //     {-0.227,  2.580,  1.426},
    //     {-0.874,  3.618,  0.468},
    //     {-2.843, -1.749,  0.001},
    //     {-2.928, -2.324, -0.815},
    //     {-2.402, -0.876, -0.235}
    // };
    float qw[6][6] = {
        {-0.19334510, -0.46148685,  0.47833049,  0.29825035, -0.13186854,  0.28789297},
        { 0.44034883,  0.36072862, -0.64135045, -0.30668181, -0.50046480, -0.50370705},
        { 0.28399932,  0.43431979,  0.04372594,  0.29212278,  0.68857270, -0.62283540},
        { 0.27508986,  0.68874609,  0.02989070, -0.62793094, -0.17460689,  0.30248281},
        {-0.08710669, -0.29755652,  0.07287551, -0.07670476,  0.13708989, -0.51668966},
        {-0.33652341,  0.47734025, -0.02819494, -0.26235083,  0.10124724, -0.27514562}
    };
    vector<float> qb = {-0.00772667, -0.00976632, 0.00472449, -0.00247038, 0.00368333, 0.0052977};
    float kw[6][6] = {
        {-0.35664424, -0.20516624,  0.28003770,  0.00807147,  0.46147987,  0.63691640},
        {-0.53476161,  0.10170779,  0.09281660, -0.29070196, -0.25511584, -0.36046422},
        { 0.53799856, -0.17341700,  0.29169440,  0.04798397, -0.31850627,  0.62774855},
        { 0.52188051,  0.63284087, -0.19074298, -0.36072421, -0.56438208,  0.09050059},
        {-0.20064761,  0.59938723,  0.24211347,  0.04471983,  0.68824172, -0.67320234},
        {-0.60655558,  0.63535196, -0.10616741,  0.51950705, -0.36297923, -0.59934723}
    };
    vector<float> kb = {-0.00729597, -0.00847853, -0.00667364, -0.00217224, -0.00510612, -0.00509783};
    float vw[18][6] = {
        {-0.32236776, -0.17334098, -0.24974832,  0.23243952,  0.23405066, -0.43255985},
        {-0.37207776, -0.29236841, -0.33391964,  0.40212354, -0.15891676, -0.04715307},
        { 0.43014771,  0.46294820,  0.29362047,  0.16417727,  0.00750901, -0.30085269},
        {-0.41389400,  0.42993420, -0.09752697, -0.13457800, -0.03949757,  0.48150256},
        {-0.01908217,  0.12491152,  0.28981364, -0.03237642, -0.39974105,  0.05357271},
        { 0.02435942, -0.48806164,  0.15527508,  0.03087234, -0.09894655,  0.39664027},
        { 0.07528272, -0.04296668, -0.03496274,  0.37308913, -0.22230250, -0.05475334},
        { 0.04483229, -0.46795091,  0.11734991,  0.38120463, -0.37019426, -0.39710829},
        { 0.15721953, -0.03715583,  0.23333946, -0.25852925, -0.37508434,  0.11698670},
        { 0.14246386,  0.13865370, -0.46316004,  0.36870313, -0.10958317, -0.25322479},
        {-0.45738128, -0.23977046, -0.37859276, -0.30466464, -0.17762688, -0.44404379},
        { 0.34731191,  0.08436943,  0.25716394, -0.29809237,  0.04881913,  0.30000335},
        { 0.16489039, -0.06942917,  0.20460993, -0.37897867,  0.25171995,  0.07408085},
        { 0.42328191, -0.20953844, -0.07943689, -0.17505027,  0.02305372, -0.29299915},
        { 0.37579060,  0.41710275,  0.22535917, -0.04029159,  0.27351055,  0.20148264},
        {-0.49959418,  0.22675881, -0.04981547, -0.21034747, -0.05637902, -0.12406142},
        { 0.28079039,  0.44551879, -0.06839568, -0.24881437,  0.21279854,  0.32945168},
        {-0.38807657,  0.10222891,  0.02276328, -0.48727232,  0.18402912,  0.37689921}
    };
    vector<float> vb = {0.00576101, 0.00306802, 0.0109279, -0.00592665, 0.00631474, 0.00501781, 0.00437072, 0.00583276, -0.000280272, -0.00159702, 0.00262178, -0.00432141, 0.005602, -0.00556788, 0.00276468, 0.00320223, 0.00906419, 0.000726261};
    float ow[18][6] = {
        {-0.35320204, -0.44877350,  0.03400484, -0.06826225,  0.02954545,  0.05593169},
        {-0.31588805,  0.33644363,  0.27646464, -0.47972265, -0.30472177, -0.42775780},
        { 0.22286461, -0.05501572, -0.18578763,  0.21867658,  0.04790035,  0.36474398},
        {-0.46552527, -0.19016309, -0.47244650,  0.25996619,  0.08402044, -0.09833983},
        { 0.20943397,  0.28052154, -0.43297791, -0.36772367,  0.17624816,  0.37265709},
        {-0.26886541, -0.17445326, -0.25081339,  0.30036581,  0.19954547, -0.31457892},
        { 0.27633503, -0.35531500, -0.15142971, -0.05521141,  0.05149174,  0.26791888},
        { 0.21791165, -0.29570678,  0.10455635, -0.41346309, -0.11690802,  0.20154063},
        { 0.45393687,  0.37000293, -0.04496303,  0.18177038,  0.26790041, -0.40719041},
        { 0.24107242,  0.17133367,  0.39538744, -0.39961600,  0.43745622,  0.36507592},
        {-0.04060918, -0.44119829,  0.35489073,  0.35424539, -0.25600150,  0.39139682},
        {-0.02537159, -0.01686346,  0.03484525,  0.10951591, -0.42093650,  0.22179314},
        { 0.24776025, -0.47349262,  0.21835335, -0.27974027,  0.07882746, -0.02759394},
        {-0.11562090,  0.11669450,  0.06452645,  0.06184981,  0.33125532, -0.46906477},
        { 0.41782188,  0.15521529, -0.11919728, -0.17083125, -0.15538336, -0.33388454},
        {-0.02566319, -0.47116563, -0.17931701,  0.04218079,  0.37661329,  0.37700504},
        { 0.26846284, -0.36372945, -0.14657748,  0.05629621,  0.41073135, -0.14158486},
        {-0.46768168,  0.47904301,  0.12411296, -0.00979479, -0.02315212,  0.00347250}
    };
    vector<float> ob = {0.00433136, 0.00635418, -0.00491021, 0.00536217, -0.00417589, -0.0111755, 0.00589018, -0.006509, -0.00739196, -0.00566651, -0.00103309, 0.00661265, 0.00598605, -0.00641791, 0.00536365, -0.00620633, -0.00445454, 0.00593659};
    float uw[18][6] = {
        { 0.47146195,  0.12264166, -0.13745292,  0.43727231, -0.06144804, -0.45357478},
        {-0.11354720,  0.31241044,  0.11206777, -0.36661547,  0.23050247, -0.47841531},
        {-0.42051935, -0.37595573, -0.10096057,  0.43546548,  0.23111425, -0.40887928},
        {-0.08520744,  0.43300849, -0.02762033, -0.11788785, -0.22137552, -0.45324367},
        { 0.16971517,  0.40831116,  0.48115236,  0.27302134,  0.17986135,  0.39502344},
        { 0.01575293, -0.14009300, -0.35589659,  0.45846868,  0.14824653, -0.34354329},
        { 0.23314013,  0.09299198, -0.13464034, -0.42419338, -0.16331446, -0.45506948},
        { 0.08643208,  0.03865500, -0.30974934,  0.06588592,  0.29121804, -0.36570388},
        {-0.32803583,  0.11518476,  0.42432192,  0.12235752,  0.04053597,  0.45016080},
        {-0.00115439,  0.46880960, -0.36703059, -0.30880651,  0.08812892,  0.23537569},
        {-0.47282028, -0.07385705,  0.40227774, -0.10361728,  0.29987761,  0.01326856},
        {-0.39664203,  0.10574283,  0.11815334,  0.22328907, -0.24134357, -0.21933733},
        { 0.26193416,  0.28414029,  0.34996578, -0.34757233, -0.22748892,  0.18629968},
        { 0.03995768, -0.18578748,  0.06716872,  0.47030026, -0.08742543,  0.18986525},
        { 0.20784907,  0.41299388,  0.22339313,  0.45253617,  0.17162104,  0.45207530},
        {-0.04500936,  0.03197551, -0.03680521,  0.20813392, -0.42284045,  0.45611432},
        { 0.33593071, -0.32467201,  0.25743985, -0.44912088, -0.14496140, -0.40058076},
        { 0.40751502, -0.12334377, -0.32653260, -0.06327434,  0.37878135,  0.00736718}
    };
    vector<float> ub = {0.00599618, -0.00348881, 0.00484457, -0.00625005, 0.0026957, 0.00579334, 0.00608938, -0.00390856, -0.00500429, -0.00573881, -0.00717589, 0.00476738, 0.00465839, -0.0131089, 0.0186777, -0.0019647, 0.00434846, 0.00998478};
    float dkw[6][5] = {
        {-0.10535034,  0.22589643,  0.48117229, -0.59393197, -0.08882657},
        {-0.54238600,  0.32853228, -0.22527528, -0.04418051, -0.31652790},
        { 0.35088360, -0.24613813, -0.11413246,  0.02672968, -0.43595213},
        { 0.51332390, -0.46411926, -0.18915971, -0.37634912,  0.46762177},
        { 0.49191189,  0.54607648, -0.07000858, -0.47708160,  0.42009234},
        {-0.42283538,  0.63939619,  0.05362598, -0.36982289, -0.17846970}
    };
    vector<float> dkb = {-0.00514213, -0.0123989, -0.00412824, -0.00639926, -0.00258688, -0.00666939};
    float dvw[18][5] = {
        { 0.25184691,  0.33512837, -0.38395202,  0.13765597,  0.36339095},
        { 0.23631278, -0.49505457, -0.20114371, -0.00737684, -0.27262428},
        { 0.38852543, -0.06079204,  0.21313998,  0.34102070, -0.37311009},
        { 0.14680476,  0.48772445, -0.22821124,  0.12617834, -0.11739206},
        { 0.30282998, -0.01733856,  0.34998721, -0.04332808,  0.37121609},
        {-0.32932481, -0.22427848,  0.08264143, -0.19658379, -0.40942615},
        { 0.41935053, -0.09798411,  0.30789140, -0.07617991, -0.24659827},
        {-0.19880413,  0.34598976, -0.26928765, -0.24552026,  0.28910866},
        {-0.38225353, -0.39468911,  0.27838311, -0.49462250,  0.43960050},
        { 0.41604093, -0.00789993, -0.30851808, -0.06194561, -0.22317883},
        { 0.46461651,  0.27896258,  0.45886126, -0.34791988, -0.05723870},
        { 0.42789593, -0.12310128, -0.35422274, -0.24784034, -0.17977411},
        { 0.01440915, -0.11359072, -0.11035265,  0.24558835,  0.35037726},
        { 0.46019682,  0.18460676,  0.26106140,  0.48835829, -0.48615912},
        { 0.29751790, -0.04452316, -0.33594793,  0.08537898, -0.01163592},
        { 0.07066652,  0.43723801,  0.24043006,  0.47561827, -0.18419807},
        { 0.20335752,  0.35309887, -0.20323761, -0.44826877,  0.31204522},
        {-0.37517461, -0.10681509, -0.20563471,  0.36637631,  0.44335833}
    };
    vector<float> dvb = {0.00526673, -0.00412824, -0.0116393, -0.00729644, -0.00855665, -0.00352825, 0.00669565, -0.00229966, -0.000515906, -0.0019566, -0.000364497, 0.004875, -0.00285247, -0.00441713, -0.00614646, -0.00191243, -0.00458986, 0.015153};
    vector<float> rbfMus = {-0.00678648, 0.257062, 0.49776, 0.744022, 0.994471};
    vector<float> rbfBetas = {6.26106, 6.26078, 6.25193, 6.2484, 6.24871};
    float x[3][6] = {
        { 0.31660631,  0.24582334,  1.70019507, -1.61362982, -0.13195422, -0.51328772},
        { 1.57928300, -0.13397725,  0.10603259, -1.64873147,  0.63477945, -0.53283960},
        { 1.58097696, -0.13393886,  0.10443226, -1.64841080,  0.63286465, -0.53138119}
    };
    float vec[3][18] = {
        {-0.00013074, -0.00135548, -0.00089373, -0.00026848,  0.00049067,  0.00204073,  0.00403996,  0.01809881,  0.05145359,  0.04148120,  0.00609934, -0.14846064,  0.00002947, -0.00095691, -0.00083741, -0.00030492,  0.00029463,  0.00001564},
        {-0.01752252, -0.12653495, -0.01934873,  0.01007762,  0.02045939,  0.47009429, -0.00468555, -0.07142961, -0.00493901,  0.02235936,  0.00649117,  0.22544210, -0.00001848,  0.00054829,  0.00067182,  0.00014066, -0.00005877, -0.00004024},
        { 0.01773860,  0.13091385,  0.02059010, -0.00975227, -0.02011802, -0.47727618, -0.00473130, -0.07154081, -0.00469382,  0.02179762,  0.00593321,  0.22304380, -0.00001854,  0.00054859,  0.00067189,  0.00014082, -0.00005878, -0.00004025}
    };
    vector<float> dx(3*6), dvec(3*18);
    EquivariantTransformerNeighbors* neighbors = createNeighbors(numAtoms, 0.0, 2.0, (periodicVectors != NULL));
    neighbors->build((float*) positions, periodicVectors);
    EquivariantTransformerLayer* layer = createLayer(numAtoms, 6, 3, rbfMus.size(), rbfMus.data(), rbfBetas.data(),
            (float*) qw, qb.data(), (float*) kw, kb.data(), (float*) vw, vb.data(), (float*) ow, ob.data(),
            (float*) uw, ub.data(), (float*) dkw, dkb.data(), (float*) dvw, dvb.data());
    layer->compute(*neighbors, (float*) positions, periodicVectors, (float*) x, (float*) vec, dx.data(), dvec.data());
    // for (int i = 0; i < y.size(); i++)
    //     assertEqual(expectedOutput[i], y[i], 1e-4, 1e-3);
    // validateDerivatives(*neighbors, *layer, (float*) positions, periodicVectors, x);
    delete neighbors;
    delete layer;
}

void testWaterNonperiodic() {
    // Values computed with TorchMD-Net.
    float expectedOutput[] = {
        6.6657829, 5.1362805, 4.3362718, -2.6427372, -4.1542015, -1.5942615, 2.0310063, 10.610411,
        1.3191403, 1.0992877, 1.174861, -0.76823407, -1.1996126, -0.66166562, 0.74301827, 3.7644627,
        0.52987105, 0.57404131, 0.6803357, -0.48603082, -0.83363354, -0.43371251, 0.52734971, 2.8404183,
        21.448631, 15.574216, 12.700784, -7.4042816, -11.032789, -4.3033171, 5.1564302, 25.685184,
        8.6628437, 6.2632074, 5.2727389, -3.0848112, -4.5920477, -1.9519548, 2.2185543, 11.037331,
        8.7150316, 6.3248448, 5.3149056, -3.114675, -4.6293163, -1.9557781, 2.2522798, 11.153768,
        32.172924, 23.424303, 18.550533, -10.736898, -16.264935, -5.7996726, 7.192831, 36.542068,
        16.937481, 12.04541, 9.9613571, -5.7430658, -8.4591007, -3.5382349, 3.9525094, 19.534882,
        17.61989, 12.638445, 10.343842, -5.9593883, -8.8567104, -3.559639, 4.1038408, 20.33786,
        45.743965, 33.181282, 26.131493, -15.055626, -22.725782, -8.0308104, 9.9640656, 50.404785,
        25.268753, 18.019264, 14.644307, -8.3915596, -12.369637, -4.9310017, 5.6836424, 27.934893,
        23.857389, 16.993416, 13.829982, -7.940237, -11.693309, -4.6838045, 5.3686848, 26.462799,
        59.573944, 43.115246, 33.862885, -19.452675, -29.289074, -10.321277, 12.795625, 64.493713,
        33.42009, 23.799131, 19.233534, -10.987288, -16.175241, -6.3719406, 7.3756623, 36.168938,
        31.60857, 22.469316, 18.195433, -10.415167, -15.306055, -6.0727119, 6.9771519, 34.30328,
        67.125504, 48.290691, 38.041954, -21.869686, -32.762165, -11.755814, 14.26789, 72.072632,
        35.483078, 25.192368, 20.326399, -11.645652, -17.048292, -6.7168756, 7.7418537, 38.036129,
        35.362617, 25.096624, 20.284662, -11.627875, -16.997498, -6.7423472, 7.7480173, 38.007557
    };
    testWater(NULL, expectedOutput);
}

void testWaterPeriodic() {
    // Values computed with TorchMD-Net.
    float expectedOutput[] = {
        18.987059, 13.167937, 11.771148, -6.8072405, -9.4687815, -4.9209137, 5.0537095, 23.428143,
        10.606168, 7.2291617, 6.7242117, -3.8749375, -5.3526406, -3.0690796, 2.9493177, 13.598877,
        47.210438, 31.992928, 28.139683, -15.919709, -22.448139, -11.650467, 11.166942, 52.899227,
        81.724319, 59.101315, 47.216019, -27.291693, -40.958469, -15.187178, 18.343681, 92.38488,
        87.742668, 63.669167, 50.596939, -27.877956, -43.177094, -17.64563, 19.995712, 97.293167,
        25.624153, 18.281868, 15.086675, -8.7424355, -12.883776, -5.3536925, 6.0267334, 29.912189,
        32.435249, 23.602295, 18.728577, -10.842152, -16.393995, -5.893826, 7.2826471, 36.905506,
        19.521622, 13.713362, 11.546396, -6.637351, -9.5248575, -4.2738609, 4.6259727, 22.199139,
        23.766819, 16.700838, 14.142832, -8.1113482, -11.664352, -5.3069444, 5.7081265, 27.309629,
        67.918587, 49.29739, 39.438034, -22.224222, -33.916054, -13.497845, 15.671877, 77.092125,
        51.731312, 37.289658, 30.424944, -17.598099, -26.194244, -10.355038, 12.153141, 60.363403,
        39.829742, 28.671593, 23.424986, -13.577568, -20.137529, -8.0050716, 9.3628139, 46.48629,
        59.573944, 43.115246, 33.862888, -19.452673, -29.289074, -10.321277, 12.795625, 64.493713,
        34.680882, 24.618969, 20.0191, -11.433189, -16.7152, -6.7448702, 7.7174506, 37.542442,
        34.539341, 24.418261, 20.073877, -11.498013, -16.661949, -6.9871426, 7.8319163, 37.864975,
        68.965775, 49.63401, 39.307724, -22.631813, -33.887375, -12.384632, 14.897013, 75.146507,
        39.130844, 27.649551, 22.657299, -12.986568, -18.833965, -7.8369241, 8.7835398, 42.641678,
        42.567787, 29.885326, 24.786411, -14.207994, -20.254772, -8.8278933, 9.7198906, 46.303577
    };
    float periodicVectors[] = {
        5.0, 0.0, 0.0,
        0.0, 5.0, 0.0,
        0.0, 0.0, 5.0
    };
    testWater(periodicVectors, expectedOutput);
}

void testWaterTriclinic() {
    // Values computed with TorchMD-Net.
    float expectedOutput[] = {
        17.745617, 12.366516, 11.006595, -6.3729196, -8.9715538, -4.5642729, 4.7206745, 22.16106,
        2.1477644, 1.6353126, 1.6874884, -1.0601712, -1.5335996, -0.9023248, 0.96841896, 4.6215644,
        48.149979, 32.666721, 28.666414, -16.224579, -22.909214, -11.816319, 11.362852, 53.923328,
        81.724319, 59.101315, 47.216019, -27.291695, -40.958469, -15.18718, 18.343681, 92.38488,
        87.898651, 63.771194, 50.694328, -27.934128, -43.23925, -17.691732, 20.040503, 97.457832,
        31.421341, 22.045143, 18.586432, -10.696246, -15.383665, -6.9288845, 7.4406862, 35.924221,
        32.862415, 23.872673, 18.981148, -10.983425, -16.547239, -6.0044589, 7.3860188, 37.276985,
        17.575203, 12.459368, 10.354189, -5.9679904, -8.7071857, -3.7207754, 4.1282072, 20.17907,
        25.453362, 17.910492, 15.153757, -8.6952667, -12.591169, -5.7042055, 6.1155634, 29.505075,
        73.083969, 52.727303, 42.568474, -23.987827, -36.284313, -14.885297, 16.949322, 82.807732,
        51.731312, 37.289658, 30.424944, -17.598099, -26.194244, -10.355038, 12.153141, 60.363403,
        40.332741, 28.998619, 23.738894, -13.757333, -20.342489, -8.1541634, 9.5037212, 47.020203,
        93.104004, 66.689079, 53.167786, -30.515736, -45.219173, -16.985079, 20.209469, 100.40714,
        33.590511, 23.91007, 19.338394, -11.047472, -16.240902, -6.4204984, 7.4229531, 36.340359,
        121.82475, 87.80098, 69.5644, -39.282513, -58.987659, -21.967787, 26.487518, 129.77406,
        131.88364, 95.230721, 75.166237, -42.842003, -64.655472, -23.57815, 28.533545, 142.7018,
        44.382286, 31.053387, 25.881222, -14.801838, -21.071901, -9.3320808, 10.13959, 48.193203,
        77.567245, 55.379211, 44.659477, -25.511921, -37.458195, -14.745174, 17.227661, 83.865067
    };
    float periodicVectors[] = {
        5.0, 0.0, 0.0,
        1.5, 5.0, 0.0,
        -0.5, -1.0, 5.0
    };
    testWater(periodicVectors, expectedOutput);
}

int main() {
    testWaterNonperiodic();
    // testWaterPeriodic();
    // testWaterTriclinic();
    return 0;
}
