#include "EquivariantTransformer.h"
#include <cmath>
#include <stdexcept>
#include <string>
#include <vector>

#include <cstdio>

using namespace std;

void assertEqual(float v1, float v2, float atol, float rtol) {
    float diff = fabs(v1-v2);
    if (diff > atol && diff/v1 > rtol)
        throw runtime_error(string("Assertion failure: expected ")+to_string(v1)+" found "+to_string(v2));
}

void validateDerivatives(EquivariantTransformerNeighbors& neighbors, EquivariantTransformerLayer& layer, float* positions, float* periodicVectors, vector<float>& x) {
    // int numAtoms = layer.getNumAtoms();
    // int width = layer.getWidth();
    // vector<float> y(numAtoms*width);
    // vector<float> inputDeriv(numAtoms*width), positionDeriv(numAtoms*3), outputDeriv(numAtoms*width, 0);
    // vector<float> offsetx(numAtoms*width), offsetPositions(numAtoms*3);
    // float step = 1e-3;
    // for (int i = 0; i < y.size(); i++) {
    //     // Use backprop to compute the gradient of one symmetry function.

    //     neighbors.build(positions, periodicVectors);
    //     layer.compute(neighbors, positions, periodicVectors, x.data(), y.data());
    //     outputDeriv[i] = 1;
    //     layer.backprop(neighbors, positions, periodicVectors, x.data(), outputDeriv.data(), inputDeriv.data(), positionDeriv.data());
    //     outputDeriv[i] = 0;

    //     // Displace the inputs along the gradient direction, compute the symmetry functions,
    //     // and calculate a finite difference approximation to the gradient magnitude from them.

    //     float norm = 0;
    //     for (int j = 0; j < inputDeriv.size(); j++)
    //         norm += inputDeriv[j]*inputDeriv[j];
    //     norm = sqrt(norm);
    //     float delta = step/norm;
    //     for (int j = 0; j < offsetx.size(); j++)
    //         offsetx[j] = x[j] - delta*inputDeriv[j];
    //     layer.compute(neighbors, positions, periodicVectors, offsetx.data(), y.data());
    //     float value1 = y[i];
    //     for (int j = 0; j < offsetx.size(); j++)
    //         offsetx[j] = x[j] + delta*inputDeriv[j];
    //     layer.compute(neighbors, positions, periodicVectors, offsetx.data(), y.data());
    //     float value2 = y[i];
    //     float estimate = (value2-value1)/(2*step);

    //     // Verify that they match.

    //     assertEqual(norm, estimate, 1e-5, 5e-3);

    //     // Displace the atom positions along the gradient direction, compute the symmetry functions,
    //     // and calculate a finite difference approximation to the gradient magnitude from them.

    //     norm = 0;
    //     for (int j = 0; j < positionDeriv.size(); j++)
    //         norm += positionDeriv[j]*positionDeriv[j];
    //     norm = sqrt(norm);
    //     delta = step/norm;
    //     for (int j = 0; j < offsetPositions.size(); j++)
    //         offsetPositions[j] = positions[j] - delta*positionDeriv[j];
    //     neighbors.build(offsetPositions.data(), periodicVectors);
    //     layer.compute(neighbors, offsetPositions.data(), periodicVectors, x.data(), y.data());
    //     value1 = y[i];
    //     for (int j = 0; j < offsetPositions.size(); j++)
    //         offsetPositions[j] = positions[j] + delta*positionDeriv[j];
    //     neighbors.build(offsetPositions.data(), periodicVectors);
    //     layer.compute(neighbors, offsetPositions.data(), periodicVectors, x.data(), y.data());
    //     value2 = y[i];
    //     estimate = (value2-value1)/(2*step);

    //     // Verify that they match.

    //     assertEqual(norm, estimate, 1e-5, 5e-3);
    // }
}

void testWater(float* periodicVectors, float* dxExpected, float* dvecExpected) {
    int numAtoms = 3;
    float positions[3][3] = {
        {-0.00570308,  0.38515871, -0.0},
        {-0.79607794, -0.194675,   -0.0},
        { 0.80178102, -0.1904837,   0.0}
    };
    // int numAtoms = 18;
    // float positions[18][3] = {
    //     { 0.726, -1.384, -0.376},
    //     {-0.025, -0.828, -0.611},
    //     { 1.456, -1.011, -0.923},
    //     {-1.324,  0.387, -0.826},
    //     {-1.923,  0.698, -1.548},
    //     {-1.173,  1.184, -0.295},
    //     { 0.837, -1.041,  2.428},
    //     { 1.024, -1.240,  1.461},
    //     { 1.410, -1.677,  2.827},
    //     { 2.765,  0.339, -1.505},
    //     { 2.834,  0.809, -0.685},
    //     { 3.582, -0.190, -1.593},
    //     {-0.916,  2.705,  0.799},
    //     {-0.227,  2.580,  1.426},
    //     {-0.874,  3.618,  0.468},
    //     {-2.843, -1.749,  0.001},
    //     {-2.928, -2.324, -0.815},
    //     {-2.402, -0.876, -0.235}
    // };
    float qw[8][8] = {
        {-0.00522702, -0.39708680, -0.56614560, -0.46387848,  0.13405597, -0.54595751, -0.49290413, -0.46313211},
        {-0.45127055, -0.40808329,  0.28719118, -0.49668744,  0.01607901, -0.62147468,  0.01261988, -0.23865005},
        {-0.53056699,  0.25254810,  0.38414922, -0.25244695, -0.60936087,  0.49643204, -0.01753957,  0.40366510},
        { 0.50966316, -0.40676647, -0.15826863, -0.03111637,  0.27225527,  0.57296836,  0.16363768, -0.50125515},
        { 0.51017773,  0.13273403,  0.31632993,  0.49859223, -0.41790104,  0.11900388, -0.54985440,  0.01024965},
        { 0.23428012,  0.24748214, -0.13241301, -0.01657019,  0.55981559, -0.35453120, -0.35020766,  0.47352734},
        {-0.03984321, -0.21420830,  0.12068424, -0.31746361,  0.27619588,  0.15343291,  0.60867673,  0.46499041},
        {-0.01670285, -0.44350579, -0.28664288,  0.29886359, -0.44614419,  0.46406564, -0.36057544, -0.39722565}
    };
    vector<float> qb = {-0.0190289, 0.0183817, -0.0125438, -0.00161802, -0.0206069, -0.0120305, 0.0362093, -0.0391062};
    float kw[8][8] = {
        { 0.44438469, -0.21689051,  0.30817059,  0.54631782,  0.30744171,  0.37276489,  0.32780486, -0.44757250},
        { 0.16366220,  0.19317634,  0.52501845, -0.53308582,  0.53962320,  0.09720869,  0.37783304, -0.40077713},
        {-0.15459912,  0.49211636,  0.54828757,  0.06994072,  0.23428527,  0.10422338,  0.25937304,  0.11454669},
        { 0.58436751,  0.10645773, -0.33562416,  0.18252952, -0.59183007,  0.26893669,  0.44175953,  0.38670978},
        {-0.35835096,  0.28679895,  0.47130227, -0.12869668, -0.15012416, -0.06132281, -0.19021979, -0.24363327},
        {-0.53268623,  0.61345875,  0.36725929,  0.34938291,  0.06689367, -0.29332209, -0.18232907,  0.20485228},
        {-0.02150974,  0.07436099,  0.26584247, -0.54124296, -0.47276738, -0.23972625, -0.23362696,  0.08780894},
        { 0.65290296,  0.15693972, -0.14728236, -0.06537164, -0.19908616,  0.03728817, -0.13596305, -0.31323522}
    };
    vector<float> kb = {-0.0195241, -0.00740129, -0.0202332, -0.070819, -0.0332695, 0.0166288, -0.00919309, 0.0658502};
    float vw[24][8] = {
        { 0.31129411, -0.29707515, -0.32569700,  0.33411169, -0.07328790, -0.10254622, -0.25317800, -0.25597695},
        {-0.41353220,  0.13062498,  0.18660481, -0.18253477, -0.26961836,  0.29626673, -0.30986038,  0.36117613},
        { 0.18956350, -0.36140707, -0.46212471, -0.32854658,  0.01210600, -0.45632493,  0.24010570,  0.44564134},
        { 0.14001612,  0.45756608, -0.38716581, -0.19881351, -0.11821844, -0.21258387, -0.34687668, -0.09418745},
        {-0.52658629,  0.42051393,  0.52813959, -0.43755677,  0.22352429, -0.34292310,  0.26145336, -0.29454643},
        { 0.38200805,  0.39041400,  0.17689419, -0.29166707, -0.31156048, -0.27409032, -0.02043829,  0.42437527},
        {-0.15846650, -0.13735884, -0.21273847,  0.45874432, -0.15287583,  0.12223954, -0.17550690, -0.22649550},
        {-0.47185737,  0.30346680,  0.03250308, -0.13246383,  0.09102368, -0.41892213,  0.36489046,  0.19917943},
        {-0.35431254,  0.36976799, -0.02815155,  0.03643036, -0.33490351,  0.28840694,  0.29946396, -0.32269892},
        { 0.27949408,  0.36354971, -0.09094640,  0.18836494, -0.30862907, -0.19339497,  0.33247644, -0.26659739},
        { 0.27415270, -0.11219703, -0.02921809,  0.24840857, -0.34326938,  0.45523220,  0.20948756, -0.01620336},
        { 0.00772403, -0.23104158,  0.34394205, -0.36724821,  0.33404750,  0.37886748,  0.42752537, -0.31854749},
        {-0.34338525,  0.36598840,  0.25738609,  0.05276766,  0.18421690,  0.40377134,  0.19578287,  0.13455352},
        {-0.01697917,  0.35789534,  0.08349101,  0.20613249, -0.03943535,  0.30690908, -0.14976017,  0.12993608},
        {-0.02182430, -0.02669817, -0.20118944,  0.30876195, -0.04875666,  0.19819273,  0.19774935,  0.31024921},
        {-0.18683721, -0.09673837, -0.38770986,  0.28817603, -0.45269537,  0.06454467, -0.31289601, -0.34181187},
        { 0.26398379, -0.22035746,  0.15959473, -0.36569148,  0.23573858,  0.19121990,  0.01334548, -0.10294520},
        {-0.03247484,  0.20622173, -0.07139538,  0.26086804, -0.23990677, -0.38275751, -0.00245233, -0.39810503},
        {-0.11968455,  0.34477258,  0.32294166, -0.32544592,  0.33906311,  0.10876606,  0.22904360, -0.06458252},
        { 0.14241302,  0.21793531, -0.41598490,  0.08416834, -0.33855477, -0.43264431, -0.17265363,  0.00688636},
        {-0.07005178, -0.15382910,  0.09188766,  0.07251546, -0.38444033, -0.13063066, -0.36091810,  0.00491562},
        {-0.25000155,  0.38270104, -0.33961895,  0.08249295, -0.17765492,  0.27467561,  0.38439783,  0.34565464},
        {-0.45287800, -0.16716395,  0.38298550,  0.26338997, -0.06857445,  0.08479554, -0.11728436, -0.33682948},
        { 0.02028751,  0.43493363, -0.12157100, -0.34004381, -0.15018770, -0.13604790,  0.27809656, -0.41226429}
    };
    vector<float> vb = {-0.0398783, -0.0242529, 0.0474957, 0.0435574, -0.133443, 0.0265408, 0.0913705, -0.162478, 0.0337922, 0.0330169, -0.0251432, 0.00494754, 0.0105322, -0.0470776, 0.0803189, 0.011884, 0.0393056, -0.00429572, -0.0377624, 0.112974, -0.0305427, 0.0572233, -0.00197651, -0.0634825};
    float ow[24][8] = {
        {-0.44051757, -0.40059143,  0.31924775,  0.19334364,  0.08885595, -0.21144259, -0.14399822, -0.40712234},
        { 0.41241878, -0.30456990, -0.37909529,  0.20900510, -0.17095362,  0.26149568, -0.23616530, -0.25764841},
        {-0.00975025, -0.01998376, -0.14109397,  0.29681405,  0.07167999, -0.37300915, -0.07573986,  0.44502833},
        { 0.24833956, -0.05318075, -0.06864828, -0.03387693,  0.01598956,  0.11244006, -0.08333588,  0.14652342},
        {-0.30912796, -0.10669520, -0.05836349,  0.05865251, -0.02846918, -0.16184288,  0.05082620,  0.09333333},
        {-0.03195281,  0.12111820,  0.15385181,  0.24460426,  0.24469826, -0.10653972,  0.13835531, -0.22492032},
        {-0.20606010, -0.13400662,  0.22283350,  0.27707708,  0.13120012, -0.13977532,  0.34257102, -0.34560716},
        { 0.28321433, -0.39543134, -0.33263391, -0.10839091,  0.27426481,  0.37680975, -0.38731688,  0.03577710},
        { 0.34954846, -0.20964159, -0.46501610,  0.17265169, -0.10691199,  0.05480469, -0.12433832, -0.31940565},
        {-0.21562040,  0.21751048, -0.06148034,  0.28057992,  0.29991642,  0.10181582,  0.41466039, -0.31712985},
        { 0.12545176,  0.24371707,  0.08192180, -0.31922483, -0.19029669, -0.03480180, -0.46359146, -0.00333184},
        {-0.40459511, -0.30455536,  0.39541352, -0.08815918, -0.29310569, -0.29315805, -0.28475013,  0.16746700},
        {-0.10656174, -0.21858557,  0.11715004, -0.14774825,  0.10058959,  0.07445857, -0.26614603, -0.34905979},
        { 0.39870465, -0.32740054,  0.25771216, -0.13216496,  0.09178529, -0.26269221, -0.10222216,  0.15839843},
        {-0.07117162, -0.24870591, -0.23965724, -0.34966302, -0.17906618,  0.00987374, -0.28073096, -0.08832666},
        { 0.49609783,  0.22462676, -0.11779002,  0.24241728,  0.26341718, -0.03896742, -0.18490417, -0.26405698},
        {-0.12675545, -0.00256965, -0.20819882, -0.21800536,  0.10887624,  0.29223523, -0.16764480, -0.02338990},
        {-0.27010012,  0.17215386, -0.41113919, -0.22668633,  0.42182836, -0.28612494,  0.21274398,  0.13838486},
        { 0.06988037,  0.29042265, -0.24466288, -0.38342032,  0.32292786, -0.03960957,  0.04196930, -0.39545265},
        { 0.33414540, -0.08152958, -0.23436649, -0.04554753, -0.27443701,  0.14514717, -0.06454674,  0.08799670},
        {-0.15377222,  0.33271161, -0.33808836, -0.10606199, -0.32484314,  0.34193206,  0.41129145,  0.10550134},
        {-0.00070345,  0.07287972,  0.41686526, -0.05206506,  0.34507093, -0.00735364, -0.24788564, -0.38879108},
        { 0.26274160, -0.38427752, -0.21797581, -0.07288642,  0.32771099,  0.13201267,  0.08044417, -0.11264604},
        {-0.41398945, -0.25581706,  0.41704673,  0.31902927, -0.11410961, -0.04845486,  0.07258143, -0.17384897}
    };
    vector<float> ob = {-0.0566262, 0.0539776, -0.0428814, 0.0454232, -0.0522219, 0.0128829, -0.0342312, -0.0761385, 0.0456527, -0.0513817, -0.0693709, -0.0264264, -0.0656584, 0.0165539, -0.0038175, 0.0261977, 0.0180459, 0.0405132, -0.0065201, -0.0300214, 0.033005, -0.0231121, 0.00185201, -0.0360808};
    float uw[24][8] = {
        { 0.31846488,  0.40683973,  0.34649947,  0.17463361,  0.07220586, -0.22251095, -0.23559314,  0.37767795},
        {-0.42873073, -0.19633391, -0.04814529,  0.22445565,  0.30065835, -0.46678659, -0.16393684, -0.15991096},
        {-0.47813755,  0.08783907, -0.01890482, -0.29610264,  0.16046795,  0.34196275,  0.25994456, -0.07754210},
        { 0.33211035,  0.31099102, -0.02804410, -0.34496459, -0.33358517, -0.26170537,  0.43059906,  0.05930692},
        {-0.31372380, -0.34388301,  0.07882167,  0.13449824, -0.39971685,  0.03379692,  0.25213456,  0.06883097},
        {-0.06040562, -0.40907058,  0.25894240, -0.07923594,  0.07268696,  0.38154340, -0.44181803,  0.00610587},
        {-0.11832947,  0.35549349, -0.30918896,  0.25162330,  0.41568577,  0.10536098, -0.05593085, -0.27798203},
        { 0.23792595, -0.21051516,  0.47951013,  0.12315498,  0.37891462,  0.25157562, -0.21159182, -0.28056139},
        { 0.38189048, -0.22414443,  0.53226107, -0.10565270,  0.02035121,  0.15107226,  0.30686465, -0.12978019},
        {-0.13999483, -0.21681029,  0.44766140,  0.34717074,  0.14848661,  0.35336754, -0.22092140, -0.49083802},
        { 0.16685669,  0.38820678,  0.54818726,  0.08925723,  0.39599892, -0.20524237,  0.17005025, -0.09077602},
        {-0.36239088,  0.45259908, -0.21396270,  0.16861288, -0.41710433, -0.19632430, -0.16351132,  0.15291874},
        {-0.47564518, -0.34705967,  0.47393838, -0.39847115,  0.27739266,  0.56507701, -0.02737800, -0.19397791},
        { 0.12814927,  0.33812889,  0.24378550, -0.01165589, -0.35946506, -0.02203588,  0.38376918,  0.15677460},
        {-0.29132134, -0.19120762, -0.23274094, -0.31011286,  0.11694834, -0.29848966,  0.38511965,  0.36202624},
        {-0.30005330,  0.39176711, -0.03637265, -0.07468209,  0.27866775,  0.32248998, -0.21030764,  0.00786813},
        {-0.22586401, -0.17421108, -0.12018297,  0.25163615, -0.29532623,  0.19539021,  0.36449528, -0.34398854},
        { 0.15639888, -0.08716850, -0.34869814,  0.02110180, -0.03848426,  0.05350480,  0.33358708,  0.10251869},
        {-0.32908750, -0.45466527, -0.00661088, -0.05585835, -0.34357736, -0.31466994, -0.25153598,  0.37655407},
        { 0.45310733, -0.42541549, -0.35955435,  0.16245309,  0.34201884, -0.09027428, -0.27266544,  0.02798823},
        { 0.17779380, -0.13600497,  0.47306740, -0.05188887, -0.38374704, -0.06334903, -0.09910498, -0.38455132},
        {-0.10113552, -0.05835749, -0.51198310, -0.42371616, -0.42630813,  0.29933792,  0.08661639, -0.20037618},
        { 0.38305718, -0.12577502, -0.04692337, -0.28255987, -0.02284737,  0.34388015, -0.41300443, -0.31502953},
        {-0.50539267,  0.44035929,  0.42004323, -0.41109714,  0.19514096, -0.30915254,  0.29878581, -0.34408447}
    };
    vector<float> ub = {-0.00390828, 0.0492123, 0.0075095, -0.0556907, -0.0330631, 0.036897, -0.0157453, 0.0392899, -0.00271102, -0.0530993, -0.00160324, -0.0555293, 0.0400333, -0.0325466, -0.0145598, -0.0345164, 0.0560411, -0.050092, 0.0371448, -0.0304038, -0.0542336, 0.0407049, 0.0520367, 0.0175954};
    float dkw[8][5] = {
        {-0.57483774,  0.36427000, -0.34939101,  0.59189266,  0.47772107},
        {-0.60764104, -0.00710505, -0.64005756, -0.49888569, -0.38582945},
        {-0.19238622, -0.33380601,  0.48137188,  0.22948878, -0.58766127},
        {-0.14539656, -0.29314467,  0.56577921,  0.22331657,  0.25410503},
        {-0.00566762, -0.60534286,  0.38320434,  0.63601452, -0.15353262},
        {-0.03612647,  0.11870914, -0.24102972, -0.65148026,  0.52007347},
        { 0.20272787, -0.00435372,  0.10852566, -0.22363125, -0.10584079},
        { 0.56911248,  0.10553292, -0.35293379,  0.45283461, -0.26977095}
    };
    vector<float> dkb = {-0.0816648, -0.0230287, -0.0679643, 0.0275775, 0.0181883, 0.0184901, -0.0196204, 0.0688863};
    float dvw[24][5] = {
        {-0.22156116,  0.31814331, -0.14613606, -0.10058651, -0.17774507},
        { 0.33192065,  0.24430588,  0.16007683,  0.21666877, -0.16548741},
        {-0.14138483, -0.13561961,  0.43836591, -0.19224443,  0.19404784},
        {-0.24697229,  0.43515152, -0.19940361,  0.40783376,  0.17396194},
        { 0.26830047,  0.12710410, -0.00416599, -0.45715550, -0.36537322},
        {-0.13908631, -0.15982290, -0.16454870,  0.07939608,  0.12216404},
        {-0.00293324, -0.32341692,  0.42864066,  0.41499382,  0.03335064},
        { 0.03794928,  0.42004716,  0.09400744, -0.39338350, -0.13205878},
        { 0.43937862, -0.10982256,  0.39835140,  0.35612541,  0.09184722},
        {-0.45242682,  0.32216913, -0.06013998,  0.07835716, -0.22105865},
        { 0.39637017,  0.00019221, -0.37369132,  0.30875796,  0.45312205},
        {-0.24251325, -0.48256537,  0.01606229,  0.10189702,  0.01179484},
        {-0.34154814, -0.00364922,  0.15477447,  0.24804978, -0.19053462},
        {-0.31850588, -0.31022829, -0.08414210, -0.02093693, -0.23235500},
        { 0.22116275, -0.49969390, -0.33228287, -0.24937661, -0.45605823},
        { 0.41784424,  0.45792440, -0.17810364, -0.24469945,  0.20081423},
        { 0.44507781, -0.01604369,  0.17673516,  0.09106385,  0.12508550},
        { 0.38082173, -0.20539466,  0.12680978, -0.33121175, -0.42646548},
        { 0.48694542, -0.18680829, -0.25486407, -0.28246528,  0.10855832},
        {-0.45320961, -0.16146980, -0.29640454, -0.17601861,  0.30778751},
        { 0.38502365, -0.01007685, -0.22259434,  0.27061769, -0.17218994},
        {-0.07028671, -0.07381959, -0.45564297, -0.38553330,  0.13208590},
        { 0.04823137, -0.21861489,  0.10795733, -0.05065341,  0.01594402},
        {-0.38543400,  0.06240481,  0.13076299, -0.11518987,  0.03993105}
    };
    vector<float> dvb = {0.0428586, 0.0245334, 0.0452651, 0.0458744, 0.00529349, 0.0205327, 0.0701441, -0.146875, -0.0054744, 0.013377, -0.0437936, -0.00726327, 0.0822113, 0.0200868, -0.0440194, -0.0291506, -0.0486872, 0.0330592, 0.0343382, -0.0178642, -0.0365416, -0.0729664, 0.0537206, -0.0593134};
    vector<float> rbfMus = {0.101553, 0.318705, 0.583893, 0.864864, 1.00073};
    vector<float> rbfBetas = {8.33898, 8.32656, 8.29602, 8.28497, 8.39592};
    float x[3][8] = {
        {-1.23202693,  0.11068475, -1.29121745,  0.97341156, -0.62200445, -0.73929554,  1.22171891,  1.42537439},
        { 1.46524370, -0.94632334, -1.58473051,  1.02234757, -0.89040160,  0.51721007, -0.45109004,  0.75503242},
        { 1.47301388, -0.94818330, -1.58373249,  1.01693881, -0.88962692,  0.52035147, -0.44879955,  0.74749255}
    };
    float vec[3][24] = {
        {-0.00649931,  0.00051163, -0.00448584,  0.00118352,  0.00945692,  0.00170941, -0.00204016, -0.00953323, -0.00852896,  0.11245234,  0.03787049, -0.00117427,  0.16089535, -0.00210185,  0.01493448, -0.26391309, -0.00682399, -0.00107262, -0.00551774,  0.00158691,  0.00968655,  0.00124875, -0.00276653, -0.00628484},
        { 0.02075083, -0.31186566, -0.07746337,  0.00662858, -0.11415102, -0.12819594, -0.01520756,  0.47074741, -0.00693760, -0.19870912, -0.05540407,  0.00948747, -0.03931627, -0.09458411, -0.01035579,  0.29976067, -0.00534064, -0.00094559, -0.00486230, -0.00007270,  0.00635808,  0.00091042, -0.00037690, -0.00653584},
        {-0.03055537,  0.30942032,  0.06588218, -0.00436250,  0.12685412,  0.12943467,  0.01371006, -0.47929314, -0.00753810, -0.19204396, -0.05259481,  0.00761145, -0.03778685, -0.09134781, -0.00952652,  0.28729597, -0.00533450, -0.00094773, -0.00485033, -0.00007758,  0.00634247,  0.00090239, -0.00037197, -0.00653294}
    };
    vector<float> dx(3*8), dvec(3*24);
    EquivariantTransformerNeighbors* neighbors = createNeighbors(numAtoms, 0.0, 2.0, (periodicVectors != NULL));
    neighbors->build((float*) positions, periodicVectors);
    EquivariantTransformerLayer* layer = createLayer(numAtoms, 8, 2, rbfMus.size(), rbfMus.data(), rbfBetas.data(),
            (float*) qw, qb.data(), (float*) kw, kb.data(), (float*) vw, vb.data(), (float*) ow, ob.data(),
            (float*) uw, ub.data(), (float*) dkw, dkb.data(), (float*) dvw, dvb.data());
    layer->compute(*neighbors, (float*) positions, periodicVectors, (float*) x, (float*) vec, dx.data(), dvec.data());
    for (int i = 0; i < dx.size(); i++)
        assertEqual(dxExpected[i], dx[i], 1e-4, 1e-3);
    for (int i = 0; i < dvec.size(); i++)
        assertEqual(dvecExpected[i], dvec[i], 1e-4, 1e-3);
    // validateDerivatives(*neighbors, *layer, (float*) positions, periodicVectors, x);
    delete neighbors;
    delete layer;
}

void testWaterNonperiodic() {
    // Values computed with TorchMD-Net.
    float dx[3][8] = {
        { 0.02994565,  0.02989720, -0.00048664, -0.02411107,  0.01553928, -0.01091675,  0.00702459, -0.03777654},
        { 0.01307157,  0.06433079,  0.00827136, -0.02689868,  0.05448419, -0.03676173,  0.02444306, -0.05454231},
        { 0.01307749,  0.06332395,  0.00761756, -0.02736206,  0.05622829, -0.03654071,  0.02408695, -0.05397451}
    };
    float dvec[3][24] = {
        { 0.00059936, -0.00429527, -0.00286969, -0.00353825,  0.00128450,  0.00059145, -0.00264776, -0.00182421,  0.09340055,  0.01094996, -0.08876669, -0.17733057, -0.05441266,  0.03233953,  0.00805241, -0.21422240,  0.00029053, -0.00423921, -0.00248393, -0.00169551,  0.00163072,  0.00024025, -0.00230272,  0.00060597},
        { 0.05666945, -0.01977924, -0.04888251,  0.16348509,  0.00375574, -0.12797762, -0.02614103,  0.12239508,  0.02995340, -0.01456947, -0.03231225,  0.09959470, -0.01683862, -0.08309054, -0.00219437,  0.06360199, -0.00841765, -0.00243336, -0.00331803, -0.00142464,  0.00190279,  0.00082962, -0.00116728, -0.00090210},
        {-0.07219718,  0.01492564,  0.04136097, -0.16424574,  0.00029660,  0.12939219,  0.02383983, -0.12333081,  0.02791173, -0.01421792, -0.03092726,  0.09535243, -0.01643194, -0.08029500, -0.00209424,  0.06081998, -0.00839535, -0.00241843, -0.00330530, -0.00142636,  0.00192682,  0.00083212, -0.00116392, -0.00091794}
    };
    testWater(NULL, (float*) dx, (float*) dvec);
}

void testWaterPeriodic() {
    // Values computed with TorchMD-Net.
    float expectedOutput[] = {
        18.987059, 13.167937, 11.771148, -6.8072405, -9.4687815, -4.9209137, 5.0537095, 23.428143,
        10.606168, 7.2291617, 6.7242117, -3.8749375, -5.3526406, -3.0690796, 2.9493177, 13.598877,
        47.210438, 31.992928, 28.139683, -15.919709, -22.448139, -11.650467, 11.166942, 52.899227,
        81.724319, 59.101315, 47.216019, -27.291693, -40.958469, -15.187178, 18.343681, 92.38488,
        87.742668, 63.669167, 50.596939, -27.877956, -43.177094, -17.64563, 19.995712, 97.293167,
        25.624153, 18.281868, 15.086675, -8.7424355, -12.883776, -5.3536925, 6.0267334, 29.912189,
        32.435249, 23.602295, 18.728577, -10.842152, -16.393995, -5.893826, 7.2826471, 36.905506,
        19.521622, 13.713362, 11.546396, -6.637351, -9.5248575, -4.2738609, 4.6259727, 22.199139,
        23.766819, 16.700838, 14.142832, -8.1113482, -11.664352, -5.3069444, 5.7081265, 27.309629,
        67.918587, 49.29739, 39.438034, -22.224222, -33.916054, -13.497845, 15.671877, 77.092125,
        51.731312, 37.289658, 30.424944, -17.598099, -26.194244, -10.355038, 12.153141, 60.363403,
        39.829742, 28.671593, 23.424986, -13.577568, -20.137529, -8.0050716, 9.3628139, 46.48629,
        59.573944, 43.115246, 33.862888, -19.452673, -29.289074, -10.321277, 12.795625, 64.493713,
        34.680882, 24.618969, 20.0191, -11.433189, -16.7152, -6.7448702, 7.7174506, 37.542442,
        34.539341, 24.418261, 20.073877, -11.498013, -16.661949, -6.9871426, 7.8319163, 37.864975,
        68.965775, 49.63401, 39.307724, -22.631813, -33.887375, -12.384632, 14.897013, 75.146507,
        39.130844, 27.649551, 22.657299, -12.986568, -18.833965, -7.8369241, 8.7835398, 42.641678,
        42.567787, 29.885326, 24.786411, -14.207994, -20.254772, -8.8278933, 9.7198906, 46.303577
    };
    float periodicVectors[] = {
        5.0, 0.0, 0.0,
        0.0, 5.0, 0.0,
        0.0, 0.0, 5.0
    };
    // testWater(periodicVectors, expectedOutput);
}

void testWaterTriclinic() {
    // Values computed with TorchMD-Net.
    float expectedOutput[] = {
        17.745617, 12.366516, 11.006595, -6.3729196, -8.9715538, -4.5642729, 4.7206745, 22.16106,
        2.1477644, 1.6353126, 1.6874884, -1.0601712, -1.5335996, -0.9023248, 0.96841896, 4.6215644,
        48.149979, 32.666721, 28.666414, -16.224579, -22.909214, -11.816319, 11.362852, 53.923328,
        81.724319, 59.101315, 47.216019, -27.291695, -40.958469, -15.18718, 18.343681, 92.38488,
        87.898651, 63.771194, 50.694328, -27.934128, -43.23925, -17.691732, 20.040503, 97.457832,
        31.421341, 22.045143, 18.586432, -10.696246, -15.383665, -6.9288845, 7.4406862, 35.924221,
        32.862415, 23.872673, 18.981148, -10.983425, -16.547239, -6.0044589, 7.3860188, 37.276985,
        17.575203, 12.459368, 10.354189, -5.9679904, -8.7071857, -3.7207754, 4.1282072, 20.17907,
        25.453362, 17.910492, 15.153757, -8.6952667, -12.591169, -5.7042055, 6.1155634, 29.505075,
        73.083969, 52.727303, 42.568474, -23.987827, -36.284313, -14.885297, 16.949322, 82.807732,
        51.731312, 37.289658, 30.424944, -17.598099, -26.194244, -10.355038, 12.153141, 60.363403,
        40.332741, 28.998619, 23.738894, -13.757333, -20.342489, -8.1541634, 9.5037212, 47.020203,
        93.104004, 66.689079, 53.167786, -30.515736, -45.219173, -16.985079, 20.209469, 100.40714,
        33.590511, 23.91007, 19.338394, -11.047472, -16.240902, -6.4204984, 7.4229531, 36.340359,
        121.82475, 87.80098, 69.5644, -39.282513, -58.987659, -21.967787, 26.487518, 129.77406,
        131.88364, 95.230721, 75.166237, -42.842003, -64.655472, -23.57815, 28.533545, 142.7018,
        44.382286, 31.053387, 25.881222, -14.801838, -21.071901, -9.3320808, 10.13959, 48.193203,
        77.567245, 55.379211, 44.659477, -25.511921, -37.458195, -14.745174, 17.227661, 83.865067
    };
    float periodicVectors[] = {
        5.0, 0.0, 0.0,
        1.5, 5.0, 0.0,
        -0.5, -1.0, 5.0
    };
    // testWater(periodicVectors, expectedOutput);
}

int main() {
    testWaterNonperiodic();
    // testWaterPeriodic();
    // testWaterTriclinic();
    return 0;
}
